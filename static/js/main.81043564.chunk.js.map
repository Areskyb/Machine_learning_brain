{"version":3,"sources":["funcitons.js","App.js","serviceWorker.js","index.js"],"names":["DrawableCanvas","el","ctx","getContext","x","y","moves","isPainting","clear","clearRect","canvas","width","height","addPoint","_x","_y","isMoving","push","redraw","strokeStyle","lineJoin","lineWidth","i","length","beginPath","moveTo","lineTo","closePath","stroke","drawLine","x1","y1","x2","y2","color","grid","w","clientWidth","h","clientHeight","p","xStep","yStep","cell","fillStyle","rect","fill","this","reset","getVector","debug","vector","data","getImageData","nonEmptyPixelsCount","isEmpty","addEventListener","event","bounds","target","getBoundingClientRect","clientX","left","clientY","top","App","useState","feelings","setFeelings","textInput","setTextInput","error","setError","iterations","setIterations","result","setResult","inTest","setInTest","trainingData","useRef","Positive","Negative","testDataVector","netRef","NeuralNetwork","Canvas","can","id","type","feelingName","canvasRef","contextRef","isDrawing","useEffect","current","CustomCanvas","onMouseMove","nativeEvent","offsetX","offsetY","onMouseUp","console","log","ref","Feeling","style","flexDirection","Data","className","Title","Step","Text","Description","map","feeling","index","key","Input","onChange","e","value","placeholder","CustomButton","onClick","property","output","alert","input","train","trainData","likely","testData","Footer","Name","window","location","href","src","cursor","styled","h1","div","h2","h5","button","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.81043564.chunk.js","sourcesContent":["function DrawableCanvas(el) {\n  const px = 20;\n  const ctx = el.getContext(\"2d\");\n  let x = [];\n  let y = [];\n  let moves = [];\n  let isPainting = false;\n\n  const clear = () => ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);\n\n  const addPoint = (_x, _y, isMoving) => {\n    x.push(_x);\n    y.push(_y);\n    moves.push(isMoving);\n  };\n\n  const redraw = () => {\n    clear();\n\n    ctx.strokeStyle = \"#ef233c\";\n    ctx.lineJoin = \"round\";\n    ctx.lineWidth = px;\n\n    for (let i = 0; i < moves.length; i++) {\n      ctx.beginPath();\n      if (moves[i] && i) {\n        ctx.moveTo(x[i - 1], y[i - 1]);\n      } else {\n        ctx.moveTo(x[i] - 1, y[i]);\n      }\n      ctx.lineTo(x[i], y[i]);\n      ctx.closePath();\n      ctx.stroke();\n    }\n  };\n\n  const drawLine = (x1, y1, x2, y2, color = \"lightgray\") => {\n    ctx.beginPath();\n    ctx.strokeStyle = color;\n    ctx.lineJoin = \"miter\";\n    ctx.lineWidth = 1;\n    ctx.moveTo(x1, y1);\n    ctx.lineTo(x2, y2);\n    ctx.stroke();\n  };\n\n  const grid = () => {\n    const w = el.clientWidth;\n    const h = el.clientHeight;\n    const p = el.clientWidth / px;\n    const xStep = w / p;\n    const yStep = h / p;\n\n    for (let x = 0; x < w; x += xStep) {\n      drawLine(x, 0, x, h);\n    }\n    for (let y = 0; y < h; y += yStep) {\n      drawLine(0, y, w, y);\n    }\n  };\n\n  const cell = (x, y, w, h) => {\n    ctx.fillStyle = \"blue\";\n    ctx.strokeStyle = \"blue\";\n    ctx.lineJoin = \"miter\";\n    ctx.lineWidth = 1;\n    ctx.rect(x, y, w, h);\n    ctx.fill();\n  };\n\n  this.reset = () => {\n    isPainting = false;\n    x = [];\n    y = [];\n    moves = [];\n    clear();\n  };\n\n  this.getVector = (debug = false) => {\n    const w = 300;\n    const h = 200;\n    const p = el.clientWidth / px;\n    const xStep = w / p;\n    const yStep = h / p;\n    const vector = [];\n    for (let x = 0; x < w; x += xStep) {\n      for (let y = 0; y < h; y += yStep) {\n        const data = ctx.getImageData(x, y, xStep, yStep);\n\n        let nonEmptyPixelsCount = 0;\n        for (let i = 0; i < data.data.length; i += 4) {\n          const isEmpty = data.data[i] === 0;\n          if (!isEmpty) {\n            nonEmptyPixelsCount += 1;\n          }\n        }\n\n        if (nonEmptyPixelsCount > 1 && debug) {\n          cell(x, y, xStep, yStep);\n        }\n\n        vector.push(nonEmptyPixelsCount > 1 ? 1 : 0);\n      }\n    }\n\n    if (debug) {\n      grid();\n    }\n    return vector;\n  };\n\n  el.addEventListener(\"mousedown\", (event) => {\n    const bounds = event.target.getBoundingClientRect();\n    const x = event.clientX - bounds.left;\n    const y = event.clientY - bounds.top;\n    isPainting = true;\n    addPoint(x, y, false);\n    redraw();\n  });\n\n  el.addEventListener(\"mousemove\", (event) => {\n    const bounds = event.target.getBoundingClientRect();\n    const x = event.clientX - bounds.left;\n    const y = event.clientY - bounds.top;\n    if (isPainting) {\n      addPoint(x, y, true);\n      redraw();\n    }\n  });\n\n  el.addEventListener(\"mouseup\", () => {\n    isPainting = false;\n  });\n\n  el.addEventListener(\"mouseleave\", () => {\n    isPainting = false;\n  });\n}\n\nexport default DrawableCanvas;\n","import React, { useEffect, useState, useRef } from \"react\";\nimport \"./App.css\";\nimport styled from \"styled-components\";\nimport { NeuralNetwork, likely } from \"brain.js\";\nimport DrawableCanvas from \"./funcitons\";\n\nfunction App() {\n  // USE EFFECT\n  // console.log(NeuralNetwork);\n  // const puta = [\n  //   { input: [0, 0], output: { positive: 1 } },\n  //   { input: [0, 1], output: { negative: 1 } },\n  //   { input: [1, 0], output: { negative: 1 } },\n  //   { input: [1, 1], output: { positive: 1 } },\n  // ];\n  // net.train(puta);\n  // console.log(\"result =>\", net.run([1, 0]));\n  // useEffect(() => {\n  //   return () => {};\n  // }, []);\n\n  // STATE\n  const [feelings, setFeelings] = useState([\"Positive\", \"Negative\"]);\n  const [textInput, setTextInput] = useState(\"\");\n  const [error, setError] = useState(0);\n  const [iterations, setIterations] = useState(0);\n  const [result, setResult] = useState(\"RESULT\");\n  const [inTest, setInTest] = useState(false);\n  // REFS\n\n  const trainingData = useRef({\n    Positive: [null, null, null],\n    Negative: [null, null, null],\n  });\n\n  const testDataVector = useRef(null);\n\n  // NEURAL NET REF\n  const netRef = useRef(new NeuralNetwork({}));\n\n  // FUNCTIONS\n\n  const renderFeelings = () => {\n    return feelings.map((feeling, index) => {\n      return <Feeling feelingName={feeling} key={index} />;\n    });\n  };\n\n  const addFeeling = (feelingName) => {\n    trainingData.current[\"Positive\"] = [null, null, null];\n    trainingData.current[\"Negative\"] = [null, null, null];\n    trainingData.current[feelingName] = [null, null, null];\n    console.log(\"training data => \", trainingData.current);\n    netRef.current = new NeuralNetwork({});\n    return setFeelings([...feelings, feelingName]);\n  };\n\n  const trainData = () => {\n    const data = [];\n    // return console.log(trainingData.current);\n\n    for (const property in trainingData.current) {\n      let output = { [property]: 1 };\n      if (\n        !trainingData.current[property][0] ||\n        !trainingData.current[property][1] ||\n        !trainingData.current[property][2]\n      ) {\n        console.log(trainingData.current);\n        return alert(\"please finish all drawing models\");\n      } else {\n        data.push({\n          input: trainingData.current[property][0],\n          output: output,\n        });\n        data.push({\n          input: trainingData.current[property][1],\n          output: output,\n        });\n        data.push({\n          input: trainingData.current[property][2],\n          output: output,\n        });\n      }\n    }\n\n    const result = netRef.current.train(data);\n    setError(result.error);\n    setIterations(result.iterations);\n  };\n\n  const testData = (vector) => {\n    console.log(vector);\n    const result = likely(vector, netRef.current);\n    !result && alert(\"please, train first your AI :)\");\n    setInTest(!inTest);\n    return setResult(result);\n  };\n\n  // COMPONENTS\n  const Canvas = ({ id, type, feelingName }) => {\n    const canvasRef = useRef(null);\n    const contextRef = useRef(null);\n    const [isDrawing] = useState(false);\n    let can;\n\n    // USEEFFECT\n    useEffect(() => {\n      let canvas = canvasRef.current;\n      can = new DrawableCanvas(canvas);\n\n      return () => {};\n    }, []);\n\n    const finishDrawing = () => {\n      if (type === \"testCanvas\") {\n        return (testDataVector.current = can.getVector());\n      }\n      trainingData.current[feelingName][id] = can.getVector();\n      console.log(\"finish\");\n      console.log(can.getVector());\n    };\n\n    const draw = ({ nativeEvent }) => {\n      if (!isDrawing) return;\n      const { offsetX, offsetY } = nativeEvent;\n      contextRef.current.lineTo(offsetX, offsetY);\n      contextRef.current.stroke();\n    };\n\n    return (\n      <CustomCanvas\n        onMouseMove={draw}\n        onMouseUp={finishDrawing}\n        // onMouseDown={startDrawing}\n        id={id}\n        ref={canvasRef}\n      ></CustomCanvas>\n    );\n  };\n\n  const Feeling = ({ feelingName }) => {\n    return (\n      <div style={{ flexDirection: \"row\" }}>\n        <Data>{feelingName}</Data>\n        <Canvas type=\"drawer\" feelingName={feelingName} id={0}></Canvas>\n        <Canvas type=\"drawer\" feelingName={feelingName} id={1}></Canvas>\n        <Canvas type=\"drawer\" feelingName={feelingName} id={2}></Canvas>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"App\">\n      <Title>The sentimental trainer AI 🤖</Title>\n      <Step>\n        <Text>Step 1: Prepare your data</Text>\n        <Description>Draw your feelings here for the AI</Description>\n        {renderFeelings()}\n        <Input\n          onChange={(e) => setTextInput(e.target.value)}\n          placeholder=\"Add feeling\"\n        ></Input>\n        <CustomButton onClick={() => textInput && addFeeling(textInput)}>\n          Create new feeling\n        </CustomButton>\n      </Step>\n      <Step>\n        <Text>Step 2: Train your AI</Text>\n        <Description>\n          Train the AI and watch the error-range and iterations that the AI has\n          done\n        </Description>\n        {error !== 0 ? <Text>👍</Text> : null}\n        <CustomButton onClick={() => trainData()}>Train</CustomButton>\n        <Data>Error : {error}</Data>\n        <Data>Iterations:{iterations} </Data>\n      </Step>\n\n      <Step>\n        <Text>Step 3: Test your Model</Text>\n        <Description>Test your model by drawing into the canvas</Description>\n        <CustomButton\n          onClick={() => {\n            testData(testDataVector.current);\n          }}\n        >\n          Test\n        </CustomButton>\n        <br />\n        {/* Here comes the canvas */}\n        <Canvas type=\"testCanvas\"></Canvas>\n\n        <Title>{result}</Title>\n      </Step>\n      <Footer></Footer>\n      <Name\n        onClick={() => (window.location.href = \"http://www.areskyberkane.com\")}\n      >\n        By Aresky Berkane{\" \"}\n      </Name>\n      <Description>Please, hire me..</Description>\n      <img\n        onClick={() =>\n          (window.location.href = \"https://www.linkedin.com/in/aresky-berkane/\")\n        }\n        width=\"50\"\n        height=\"50\"\n        src=\"https://www.tapas-etn-eu.org/images/icon-linkedin.png/@@images/image.png\"\n        style={{ cursor: \"pointer\" }}\n      ></img>\n      <Footer></Footer>\n    </div>\n  );\n}\n\nexport default App;\nconst Title = styled.h1`\n  color: #2b2d42;\n`;\nconst Step = styled.div`\n  margin-top: 50px;\n`;\nconst Text = styled.h2`\n  color: #d80032;\n`;\nconst Name = styled.h2`\n  color: #2b2d42;\n  cursor: pointer;\n`;\nconst Description = styled.h5`\n  color: #2b2d42;\n`;\nconst Data = styled.h2`\n  color: #2b2d42;\n`;\nconst CustomButton = styled.button`\n  background-color: #ef233c; /* Green */\n  border: none;\n  color: white;\n  padding: 15px 32px;\n  text-align: center;\n  text-decoration: none;\n  display: inline-block;\n  font-size: 16px;\n`;\nconst Input = styled.input`\n  border-color: #8d99ae;\n  padding: 13px 32px;\n  font-size: 16px;\n`;\nconst CustomCanvas = styled.canvas`\n  border: 2px solid #2b2d42;\n  border-radius: 3px;\n  margin: 10px;\n  margin-bottom: 10px;\n  margin-right: 5px;\n  margin-left: 5px;\n`;\n\nconst Footer = styled.div`\n  margin-top: 200px;\n`;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}